{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["class $a5fd07fa01589658$var$Game {\n    constructor(initialState = null){\n        // Initialize game state (empty board or provided state)\n        this.board = initialState || [\n            [\n                null,\n                null,\n                null,\n                null\n            ],\n            [\n                null,\n                null,\n                null,\n                null\n            ],\n            [\n                null,\n                null,\n                null,\n                null\n            ],\n            [\n                null,\n                null,\n                null,\n                null\n            ]\n        ];\n        this.score = 0;\n        this.gameOver = false;\n        this.won = false;\n        this.isMoved = false;\n        this.mergeFlags = [\n            [\n                false,\n                false,\n                false,\n                false\n            ],\n            [\n                false,\n                false,\n                false,\n                false\n            ],\n            [\n                false,\n                false,\n                false,\n                false\n            ],\n            [\n                false,\n                false,\n                false,\n                false\n            ]\n        ]; // Track merged cells to avoid merging twice\n    }\n    // Get the current state of the board\n    getState() {\n        // eslint-disable-next-line max-len\n        return JSON.parse(JSON.stringify(this.board)); // Return a deep copy of the board\n    }\n    // Get the current score\n    getScore() {\n        return this.score;\n    }\n    // Get the current game status (running, win, or game over)\n    getStatus() {\n        if (this.won) return 'Won';\n        if (this.gameOver) return 'Game Over';\n        return 'Running';\n    }\n    // Start the game (hide start message)\n    start() {\n        this.addTile();\n        this.addTile();\n    }\n    // Restart the game (reset state to initial state)\n    restart() {\n        this.board = [\n            [\n                null,\n                null,\n                null,\n                null\n            ],\n            [\n                null,\n                null,\n                null,\n                null\n            ],\n            [\n                null,\n                null,\n                null,\n                null\n            ],\n            [\n                null,\n                null,\n                null,\n                null\n            ]\n        ];\n        this.score = 0;\n        this.gameOver = false;\n        this.won = false;\n        this.isMoved = false;\n        this.mergeFlags = [\n            [\n                false,\n                false,\n                false,\n                false\n            ],\n            [\n                false,\n                false,\n                false,\n                false\n            ],\n            [\n                false,\n                false,\n                false,\n                false\n            ],\n            [\n                false,\n                false,\n                false,\n                false\n            ]\n        ];\n        this.start();\n    }\n    // Add a new tile (2 or 4) at a random empty position\n    addTile() {\n        const emptyCells = [];\n        // eslint-disable-next-line no-shadow\n        for(let row = 0; row < 4; row++){\n            // eslint-disable-next-line no-shadow\n            for(let col = 0; col < 4; col++)if (this.board[row][col] === null) emptyCells.push([\n                row,\n                col\n            ]);\n        }\n        if (emptyCells.length === 0) return;\n        const [row, col] = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n        this.board[row][col] = Math.random() < 0.9 ? 2 : 4;\n    }\n    // Move tiles to the left\n    moveLeft() {\n        this.isMoved = false;\n        for(let row = 0; row < 4; row++){\n            this.mergeFlags[row] = [\n                false,\n                false,\n                false,\n                false\n            ];\n            for(let col = 1; col < 4; col++)if (this.board[row][col] !== null) {\n                let currentCol = col;\n                while(currentCol > 0 && this.board[row][currentCol - 1] === null){\n                    this.board[row][currentCol - 1] = this.board[row][currentCol];\n                    this.board[row][currentCol] = null;\n                    currentCol--;\n                    this.isMoved = true;\n                }\n                if (currentCol > 0 && this.board[row][currentCol - 1] === this.board[row][currentCol] && !this.mergeFlags[row][currentCol - 1]) {\n                    this.board[row][currentCol - 1] *= 2;\n                    this.score += this.board[row][currentCol - 1];\n                    this.board[row][currentCol] = null;\n                    this.mergeFlags[row][currentCol - 1] = true;\n                    this.isMoved = true;\n                }\n            }\n        }\n        if (this.isMoved) {\n            this.addTile();\n            this.checkGameOver();\n            this.checkWin();\n        }\n    }\n    // Move tiles to the right\n    moveRight() {\n        this.board = this.board.map((row)=>row.reverse());\n        this.moveLeft();\n        this.board = this.board.map((row)=>row.reverse());\n    }\n    // Move tiles up\n    moveUp() {\n        this.board = this.transposeBoard();\n        this.moveLeft();\n        this.board = this.transposeBoard();\n    }\n    // Move tiles down\n    moveDown() {\n        this.board = this.transposeBoard();\n        this.moveRight();\n        this.board = this.transposeBoard();\n    }\n    // Transpose the board (used for moving up/down)\n    transposeBoard() {\n        return this.board[0].map((_, colIndex)=>this.board.map((row)=>row[colIndex]));\n    }\n    // Check if the player has won (2048 reached)\n    checkWin() {\n        for(let row = 0; row < 4; row++){\n            for(let col = 0; col < 4; col++)if (this.board[row][col] === 2048) {\n                this.won = true;\n                break;\n            }\n        }\n    }\n    // Check if the game is over (no moves left)\n    checkGameOver() {\n        for(let row = 0; row < 4; row++)for(let col = 0; col < 4; col++){\n            if (this.board[row][col] === null) return;\n            if (row < 3 && this.board[row][col] === this.board[row + 1][col]) return;\n            if (col < 3 && this.board[row][col] === this.board[row][col + 1]) return;\n        }\n        this.gameOver = true;\n    }\n    isGameOver() {\n        // Check if there are any empty cells\n        for (const row of this.state){\n            if (row.includes(0)) return false;\n        }\n        // Check if adjacent cells can be merged (horizontal)\n        for (const row of this.state)for(let col = 0; col < row.length - 1; col++){\n            if (row[col] === row[col + 1]) return false;\n        }\n        // Check if adjacent cells can be merged (vertical)\n        for(let col = 0; col < this.state[0].length; col++)for(let row = 0; row < this.state.length - 1; row++){\n            if (this.state[row][col] === this.state[row + 1][col]) return false;\n        }\n        return true; // No moves left\n    }\n}\nvar $a5fd07fa01589658$export$2e2bcd8739ae039 = $a5fd07fa01589658$var$Game;\n\n\n'use strict';\nconst $09e991522ca7e64e$var$game = new (0, $a5fd07fa01589658$export$2e2bcd8739ae039)();\n// DOM elements\nconst $09e991522ca7e64e$var$gameBoard = document.querySelector('.game-board');\nconst $09e991522ca7e64e$var$restartButton = document.getElementById('restart');\nconst $09e991522ca7e64e$var$scoreDisplay = document.getElementById('score');\nconst $09e991522ca7e64e$var$gameOverMessage = document.querySelector('.game-over');\nconst $09e991522ca7e64e$var$winMessage = document.getElementById('win');\n// Function to update the board display\nfunction $09e991522ca7e64e$var$updateBoard() {\n    $09e991522ca7e64e$var$gameBoard.innerHTML = '';\n    const board = $09e991522ca7e64e$var$game.getState();\n    board.forEach((row)=>{\n        row.forEach((cell)=>{\n            const cellElement = document.createElement('div');\n            cellElement.classList.add('field-cell');\n            if (cell) {\n                cellElement.classList.add(`field-cell--${cell}`);\n                cellElement.textContent = cell;\n            }\n            $09e991522ca7e64e$var$gameBoard.appendChild(cellElement);\n        });\n    });\n    $09e991522ca7e64e$var$scoreDisplay.textContent = $09e991522ca7e64e$var$game.getScore();\n    if ($09e991522ca7e64e$var$game.getStatus() === 'Won') $09e991522ca7e64e$var$winMessage.classList.remove('hidden');\n    else if ($09e991522ca7e64e$var$game.getStatus() === 'Game Over') $09e991522ca7e64e$var$gameOverMessage.classList.remove('hidden');\n}\nfunction $09e991522ca7e64e$var$updateTileClasses(tileElement, value) {\n    tileElement.className = 'tile';\n    if (value) tileElement.classList.add(`tile-${value}`);\n}\n// eslint-disable-next-line no-unused-vars\nfunction $09e991522ca7e64e$var$updateUI() {\n    // Update the game board and score\n    // eslint-disable-next-line no-undef\n    renderGameBoard($09e991522ca7e64e$var$game.getState());\n    // eslint-disable-next-line no-undef\n    updateScore($09e991522ca7e64e$var$game.getScore());\n    // Check for game over and display the loss message\n    if ($09e991522ca7e64e$var$game.getStatus() === 'game_over') {\n        document.querySelector('.message-lose').classList.remove('hidden');\n        document.querySelector('.start').textContent = 'Restart';\n    }\n}\n// Function to handle the arrow key moves\n// eslint-disable-next-line no-shadow\ndocument.addEventListener('keydown', (event)=>{\n    if ($09e991522ca7e64e$var$game.getStatus() === 'Game Over' || $09e991522ca7e64e$var$game.getStatus() === 'Won') return;\n    switch(event.key){\n        case 'ArrowLeft':\n            $09e991522ca7e64e$var$game.moveLeft();\n            break;\n        case 'ArrowRight':\n            $09e991522ca7e64e$var$game.moveRight();\n            break;\n        case 'ArrowUp':\n            $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case 'ArrowDown':\n            $09e991522ca7e64e$var$game.moveDown();\n            break;\n    }\n    $09e991522ca7e64e$var$updateBoard();\n});\n// Restart game\n$09e991522ca7e64e$var$restartButton.addEventListener('click', ()=>{\n    const confirmRestart = window.confirm('Do you want to restart the game? Your current progress will be lost.');\n    if (confirmRestart) {\n        $09e991522ca7e64e$var$game.restart();\n        $09e991522ca7e64e$var$updateBoard();\n        $09e991522ca7e64e$var$winMessage.classList.add('hidden');\n        $09e991522ca7e64e$var$gameOverMessage.classList.add('hidden');\n        $09e991522ca7e64e$var$restartButton.textContent = 'Start';\n    }\n});\n// Initial board setup\n$09e991522ca7e64e$var$game.start();\n$09e991522ca7e64e$var$updateBoard();\n$09e991522ca7e64e$var$updateTileClasses();\n$09e991522ca7e64e$var$updateUI();\n\n\n//# sourceMappingURL=index.7e4e7b96.js.map\n","'use strict';\n\nimport Game from '../modules/Game.class.js';\n\nconst game = new Game();\n\n// DOM elements\nconst gameBoard = document.querySelector('.game-board');\nconst restartButton = document.getElementById('restart');\nconst scoreDisplay = document.getElementById('score');\nconst gameOverMessage = document.querySelector('.game-over');\nconst winMessage = document.getElementById('win');\n\n// Function to update the board display\nfunction updateBoard() {\n  gameBoard.innerHTML = '';\n\n  const board = game.getState();\n\n  board.forEach((row) => {\n    row.forEach((cell) => {\n      const cellElement = document.createElement('div');\n\n      cellElement.classList.add('field-cell');\n\n      if (cell) {\n        cellElement.classList.add(`field-cell--${cell}`);\n        cellElement.textContent = cell;\n      }\n      gameBoard.appendChild(cellElement);\n    });\n  });\n\n  scoreDisplay.textContent = game.getScore();\n\n  if (game.getStatus() === 'Won') {\n    winMessage.classList.remove('hidden');\n  } else if (game.getStatus() === 'Game Over') {\n    gameOverMessage.classList.remove('hidden');\n  }\n}\n\nfunction updateTileClasses(tileElement, value) {\n  tileElement.className = 'tile';\n\n  if (value) {\n    tileElement.classList.add(`tile-${value}`);\n  }\n}\n\n// eslint-disable-next-line no-unused-vars\nfunction updateUI() {\n  // Update the game board and score\n  // eslint-disable-next-line no-undef\n  renderGameBoard(game.getState());\n  // eslint-disable-next-line no-undef\n  updateScore(game.getScore());\n\n  // Check for game over and display the loss message\n  if (game.getStatus() === 'game_over') {\n    document.querySelector('.message-lose').classList.remove('hidden');\n    document.querySelector('.start').textContent = 'Restart';\n  }\n}\n\n// Function to handle the arrow key moves\n// eslint-disable-next-line no-shadow\ndocument.addEventListener('keydown', (event) => {\n  if (game.getStatus() === 'Game Over' || game.getStatus() === 'Won') {\n    return;\n  }\n\n  switch (event.key) {\n    case 'ArrowLeft':\n      game.moveLeft();\n      break;\n    case 'ArrowRight':\n      game.moveRight();\n      break;\n    case 'ArrowUp':\n      game.moveUp();\n      break;\n    case 'ArrowDown':\n      game.moveDown();\n      break;\n  }\n\n  updateBoard();\n});\n\n// Restart game\nrestartButton.addEventListener('click', () => {\n  const confirmRestart = window.confirm(\n    'Do you want to restart the game? Your current progress will be lost.',\n  );\n\n  if (confirmRestart) {\n    game.restart();\n    updateBoard();\n    winMessage.classList.add('hidden');\n    gameOverMessage.classList.add('hidden');\n    restartButton.textContent = 'Start';\n  } else {\n    // User decided not to restart; do nothing\n  }\n});\n\n// Initial board setup\ngame.start();\nupdateBoard();\nupdateTileClasses();\nupdateUI();\n","class Game {\n  constructor(initialState = null) {\n    // Initialize game state (empty board or provided state)\n    this.board = initialState || [\n      [null, null, null, null],\n      [null, null, null, null],\n      [null, null, null, null],\n      [null, null, null, null],\n    ];\n    this.score = 0;\n    this.gameOver = false;\n    this.won = false;\n    this.isMoved = false;\n\n    this.mergeFlags = [\n      [false, false, false, false],\n      [false, false, false, false],\n      [false, false, false, false],\n      [false, false, false, false],\n    ]; // Track merged cells to avoid merging twice\n  }\n\n  // Get the current state of the board\n  getState() {\n    // eslint-disable-next-line max-len\n    return JSON.parse(JSON.stringify(this.board)); // Return a deep copy of the board\n  }\n\n  // Get the current score\n  getScore() {\n    return this.score;\n  }\n\n  // Get the current game status (running, win, or game over)\n  getStatus() {\n    if (this.won) {\n      return 'Won';\n    }\n\n    if (this.gameOver) {\n      return 'Game Over';\n    }\n\n    return 'Running';\n  }\n\n  // Start the game (hide start message)\n  start() {\n    this.addTile();\n    this.addTile();\n  }\n\n  // Restart the game (reset state to initial state)\n  restart() {\n    this.board = [\n      [null, null, null, null],\n      [null, null, null, null],\n      [null, null, null, null],\n      [null, null, null, null],\n    ];\n    this.score = 0;\n    this.gameOver = false;\n    this.won = false;\n    this.isMoved = false;\n\n    this.mergeFlags = [\n      [false, false, false, false],\n      [false, false, false, false],\n      [false, false, false, false],\n      [false, false, false, false],\n    ];\n    this.start();\n  }\n\n  // Add a new tile (2 or 4) at a random empty position\n  addTile() {\n    const emptyCells = [];\n\n    // eslint-disable-next-line no-shadow\n    for (let row = 0; row < 4; row++) {\n      // eslint-disable-next-line no-shadow\n      for (let col = 0; col < 4; col++) {\n        if (this.board[row][col] === null) {\n          emptyCells.push([row, col]);\n        }\n      }\n    }\n\n    if (emptyCells.length === 0) {\n      return;\n    }\n\n    const [row, col] =\n      emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n    this.board[row][col] = Math.random() < 0.9 ? 2 : 4;\n  }\n\n  // Move tiles to the left\n  moveLeft() {\n    this.isMoved = false;\n\n    for (let row = 0; row < 4; row++) {\n      this.mergeFlags[row] = [false, false, false, false];\n\n      for (let col = 1; col < 4; col++) {\n        if (this.board[row][col] !== null) {\n          let currentCol = col;\n\n          while (currentCol > 0 && this.board[row][currentCol - 1] === null) {\n            this.board[row][currentCol - 1] = this.board[row][currentCol];\n            this.board[row][currentCol] = null;\n            currentCol--;\n            this.isMoved = true;\n          }\n\n          if (\n            currentCol > 0 &&\n            this.board[row][currentCol - 1] === this.board[row][currentCol] &&\n            !this.mergeFlags[row][currentCol - 1]\n          ) {\n            this.board[row][currentCol - 1] *= 2;\n            this.score += this.board[row][currentCol - 1];\n            this.board[row][currentCol] = null;\n            this.mergeFlags[row][currentCol - 1] = true;\n            this.isMoved = true;\n          }\n        }\n      }\n    }\n\n    if (this.isMoved) {\n      this.addTile();\n      this.checkGameOver();\n      this.checkWin();\n    }\n  }\n\n  // Move tiles to the right\n  moveRight() {\n    this.board = this.board.map((row) => row.reverse());\n    this.moveLeft();\n    this.board = this.board.map((row) => row.reverse());\n  }\n\n  // Move tiles up\n  moveUp() {\n    this.board = this.transposeBoard();\n    this.moveLeft();\n    this.board = this.transposeBoard();\n  }\n\n  // Move tiles down\n  moveDown() {\n    this.board = this.transposeBoard();\n    this.moveRight();\n    this.board = this.transposeBoard();\n  }\n\n  // Transpose the board (used for moving up/down)\n  transposeBoard() {\n    return this.board[0].map(\n      (_, colIndex) => this.board.map((row) => row[colIndex]),\n      // eslint-disable-next-line function-paren-newline\n    );\n  }\n\n  // Check if the player has won (2048 reached)\n  checkWin() {\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (this.board[row][col] === 2048) {\n          this.won = true;\n          break;\n        }\n      }\n    }\n  }\n\n  // Check if the game is over (no moves left)\n  checkGameOver() {\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (this.board[row][col] === null) {\n          return;\n        }\n\n        if (row < 3 && this.board[row][col] === this.board[row + 1][col]) {\n          return;\n        }\n\n        if (col < 3 && this.board[row][col] === this.board[row][col + 1]) {\n          return;\n        }\n      }\n    }\n    this.gameOver = true;\n  }\n\n  isGameOver() {\n    // Check if there are any empty cells\n    for (const row of this.state) {\n      if (row.includes(0)) {\n        return false;\n      }\n    }\n\n    // Check if adjacent cells can be merged (horizontal)\n    for (const row of this.state) {\n      for (let col = 0; col < row.length - 1; col++) {\n        if (row[col] === row[col + 1]) {\n          return false;\n        }\n      }\n    }\n\n    // Check if adjacent cells can be merged (vertical)\n    for (let col = 0; col < this.state[0].length; col++) {\n      for (let row = 0; row < this.state.length - 1; row++) {\n        if (this.state[row][col] === this.state[row + 1][col]) {\n          return false;\n        }\n      }\n    }\n\n    return true; // No moves left\n  }\n}\n\nexport default Game;\n"],"names":["$09e991522ca7e64e$var$game","constructor","initialState","board","score","gameOver","won","isMoved","mergeFlags","getState","JSON","parse","stringify","getScore","getStatus","start","addTile","restart","emptyCells","row","col","push","length","Math","floor","random","moveLeft","currentCol","checkGameOver","checkWin","moveRight","map","reverse","moveUp","transposeBoard","moveDown","_","colIndex","isGameOver","state","includes","$09e991522ca7e64e$var$gameBoard","document","querySelector","$09e991522ca7e64e$var$restartButton","getElementById","$09e991522ca7e64e$var$scoreDisplay","$09e991522ca7e64e$var$gameOverMessage","$09e991522ca7e64e$var$winMessage","$09e991522ca7e64e$var$updateBoard","innerHTML","forEach","cell","cellElement","createElement","classList","add","textContent","appendChild","remove","addEventListener","event","key","window","confirm","tileElement","className","renderGameBoard","updateScore"],"version":3,"file":"index.7e4e7b96.js.map"}