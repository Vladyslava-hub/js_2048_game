{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js","node_modules/@swc/helpers/esm/_class_call_check.js","node_modules/@swc/helpers/esm/_create_class.js","node_modules/@swc/helpers/esm/_sliced_to_array.js","node_modules/@swc/helpers/esm/_array_with_holes.js","node_modules/@swc/helpers/esm/_iterable_to_array_limit.js","node_modules/@swc/helpers/esm/_non_iterable_rest.js","node_modules/@swc/helpers/esm/_unsupported_iterable_to_array.js","node_modules/@swc/helpers/esm/_array_like_to_array.js"],"sourcesContent":["(function () {\nfunction $8713978b2328d32b$export$71511d61b312f219(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\n\nfunction $4fc75ccb937ab1df$var$_defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction $4fc75ccb937ab1df$export$71511d61b312f219(Constructor, protoProps, staticProps) {\n    if (protoProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor, staticProps);\n    return Constructor;\n}\n\n\nfunction $09cbfe85151ea6c6$export$71511d61b312f219(arr) {\n    if (Array.isArray(arr)) return arr;\n}\n\n\nfunction $8ca2848f896a6803$export$71511d61b312f219(arr, i) {\n    var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n    if (_i == null) return;\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _s, _e;\n    try {\n        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){\n            _arr.push(_s.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally{\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally{\n            if (_d) throw _e;\n        }\n    }\n    return _arr;\n}\n\n\nfunction $a0bc1859061deae1$export$71511d61b312f219() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\n\nfunction $c3b10a83b523f372$export$71511d61b312f219(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\n\n\nfunction $d4f69c5c6c4654b1$export$71511d61b312f219(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return (0, $c3b10a83b523f372$export$71511d61b312f219)(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return (0, $c3b10a83b523f372$export$71511d61b312f219)(o, minLen);\n}\n\n\nfunction $efec029548ccee7f$export$71511d61b312f219(arr, i) {\n    return (0, $09cbfe85151ea6c6$export$71511d61b312f219)(arr) || (0, $8ca2848f896a6803$export$71511d61b312f219)(arr, i) || (0, $d4f69c5c6c4654b1$export$71511d61b312f219)(arr, i) || (0, $a0bc1859061deae1$export$71511d61b312f219)();\n}\n\n\nvar $3d28d7f1aac198f5$var$Game = /*#__PURE__*/ function() {\n    \"use strict\";\n    function Game() {\n        var initialState = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;\n        (0, $8713978b2328d32b$export$71511d61b312f219)(this, Game);\n        // Initialize game state (empty board or provided state)\n        this.board = initialState || [\n            [\n                null,\n                null,\n                null,\n                null\n            ],\n            [\n                null,\n                null,\n                null,\n                null\n            ],\n            [\n                null,\n                null,\n                null,\n                null\n            ],\n            [\n                null,\n                null,\n                null,\n                null\n            ]\n        ];\n        this.score = 0;\n        this.gameOver = false;\n        this.won = false;\n        this.isMoved = false;\n        this.mergeFlags = [\n            [\n                false,\n                false,\n                false,\n                false\n            ],\n            [\n                false,\n                false,\n                false,\n                false\n            ],\n            [\n                false,\n                false,\n                false,\n                false\n            ],\n            [\n                false,\n                false,\n                false,\n                false\n            ]\n        ]; // Track merged cells to avoid merging twice\n    }\n    (0, $4fc75ccb937ab1df$export$71511d61b312f219)(Game, [\n        {\n            // Get the current state of the board\n            key: \"getState\",\n            value: function getState() {\n                // eslint-disable-next-line max-len\n                return JSON.parse(JSON.stringify(this.board)); // Return a deep copy of the board\n            }\n        },\n        {\n            // Get the current score\n            key: \"getScore\",\n            value: function getScore() {\n                return this.score;\n            }\n        },\n        {\n            // Get the current game status (running, win, or game over)\n            key: \"getStatus\",\n            value: function getStatus() {\n                if (this.won) return 'Won';\n                if (this.gameOver) return 'Game Over';\n                return 'Running';\n            }\n        },\n        {\n            // Start the game (hide start message)\n            key: \"start\",\n            value: function start() {\n                this.addTile();\n                this.addTile();\n            }\n        },\n        {\n            // Restart the game (reset state to initial state)\n            key: \"restart\",\n            value: function restart() {\n                this.board = [\n                    [\n                        null,\n                        null,\n                        null,\n                        null\n                    ],\n                    [\n                        null,\n                        null,\n                        null,\n                        null\n                    ],\n                    [\n                        null,\n                        null,\n                        null,\n                        null\n                    ],\n                    [\n                        null,\n                        null,\n                        null,\n                        null\n                    ]\n                ];\n                this.score = 0;\n                this.gameOver = false;\n                this.won = false;\n                this.isMoved = false;\n                this.mergeFlags = [\n                    [\n                        false,\n                        false,\n                        false,\n                        false\n                    ],\n                    [\n                        false,\n                        false,\n                        false,\n                        false\n                    ],\n                    [\n                        false,\n                        false,\n                        false,\n                        false\n                    ],\n                    [\n                        false,\n                        false,\n                        false,\n                        false\n                    ]\n                ];\n                this.start();\n            }\n        },\n        {\n            // Add a new tile (2 or 4) at a random empty position\n            key: \"addTile\",\n            value: function addTile() {\n                var emptyCells = [];\n                // eslint-disable-next-line no-shadow\n                for(var row = 0; row < 4; row++){\n                    // eslint-disable-next-line no-shadow\n                    for(var col = 0; col < 4; col++)if (this.board[row][col] === null) emptyCells.push([\n                        row,\n                        col\n                    ]);\n                }\n                if (emptyCells.length === 0) return;\n                var _emptyCells_Math_floor = (0, $efec029548ccee7f$export$71511d61b312f219)(emptyCells[Math.floor(Math.random() * emptyCells.length)], 2), row1 = _emptyCells_Math_floor[0], col1 = _emptyCells_Math_floor[1];\n                this.board[row1][col1] = Math.random() < 0.9 ? 2 : 4;\n            }\n        },\n        {\n            // Move tiles to the left\n            key: \"moveLeft\",\n            value: function moveLeft() {\n                this.isMoved = false;\n                for(var row = 0; row < 4; row++){\n                    this.mergeFlags[row] = [\n                        false,\n                        false,\n                        false,\n                        false\n                    ];\n                    for(var col = 1; col < 4; col++)if (this.board[row][col] !== null) {\n                        var currentCol = col;\n                        while(currentCol > 0 && this.board[row][currentCol - 1] === null){\n                            this.board[row][currentCol - 1] = this.board[row][currentCol];\n                            this.board[row][currentCol] = null;\n                            currentCol--;\n                            this.isMoved = true;\n                        }\n                        if (currentCol > 0 && this.board[row][currentCol - 1] === this.board[row][currentCol] && !this.mergeFlags[row][currentCol - 1]) {\n                            this.board[row][currentCol - 1] *= 2;\n                            this.score += this.board[row][currentCol - 1];\n                            this.board[row][currentCol] = null;\n                            this.mergeFlags[row][currentCol - 1] = true;\n                            this.isMoved = true;\n                        }\n                    }\n                }\n                if (this.isMoved) {\n                    this.addTile();\n                    this.checkGameOver();\n                    this.checkWin();\n                }\n            }\n        },\n        {\n            // Move tiles to the right\n            key: \"moveRight\",\n            value: function moveRight() {\n                this.board = this.board.map(function(row) {\n                    return row.reverse();\n                });\n                this.moveLeft();\n                this.board = this.board.map(function(row) {\n                    return row.reverse();\n                });\n            }\n        },\n        {\n            // Move tiles up\n            key: \"moveUp\",\n            value: function moveUp() {\n                this.board = this.transposeBoard();\n                this.moveLeft();\n                this.board = this.transposeBoard();\n            }\n        },\n        {\n            // Move tiles down\n            key: \"moveDown\",\n            value: function moveDown() {\n                this.board = this.transposeBoard();\n                this.moveRight();\n                this.board = this.transposeBoard();\n            }\n        },\n        {\n            // Transpose the board (used for moving up/down)\n            key: \"transposeBoard\",\n            value: function transposeBoard() {\n                var _this = this;\n                return this.board[0].map(function(_, colIndex) {\n                    return _this.board.map(function(row) {\n                        return row[colIndex];\n                    });\n                });\n            }\n        },\n        {\n            // Check if the player has won (2048 reached)\n            key: \"checkWin\",\n            value: function checkWin() {\n                for(var row = 0; row < 4; row++){\n                    for(var col = 0; col < 4; col++)if (this.board[row][col] === 2048) {\n                        this.won = true;\n                        break;\n                    }\n                }\n            }\n        },\n        {\n            // Check if the game is over (no moves left)\n            key: \"checkGameOver\",\n            value: function checkGameOver() {\n                for(var row = 0; row < 4; row++)for(var col = 0; col < 4; col++){\n                    if (this.board[row][col] === null) return;\n                    if (row < 3 && this.board[row][col] === this.board[row + 1][col]) return;\n                    if (col < 3 && this.board[row][col] === this.board[row][col + 1]) return;\n                }\n                this.gameOver = true;\n            }\n        },\n        {\n            key: \"isGameOver\",\n            value: function isGameOver() {\n                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                try {\n                    // Check if there are any empty cells\n                    for(var _iterator = this.state[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                        var row = _step.value;\n                        if (row.includes(0)) return false;\n                    }\n                } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                } finally{\n                    try {\n                        if (!_iteratorNormalCompletion && _iterator.return != null) {\n                            _iterator.return();\n                        }\n                    } finally{\n                        if (_didIteratorError) {\n                            throw _iteratorError;\n                        }\n                    }\n                }\n                var _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;\n                try {\n                    // Check if adjacent cells can be merged (horizontal)\n                    for(var _iterator1 = this.state[Symbol.iterator](), _step1; !(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion1 = true){\n                        var row1 = _step1.value;\n                        for(var col = 0; col < row1.length - 1; col++){\n                            if (row1[col] === row1[col + 1]) return false;\n                        }\n                    }\n                } catch (err) {\n                    _didIteratorError1 = true;\n                    _iteratorError1 = err;\n                } finally{\n                    try {\n                        if (!_iteratorNormalCompletion1 && _iterator1.return != null) {\n                            _iterator1.return();\n                        }\n                    } finally{\n                        if (_didIteratorError1) {\n                            throw _iteratorError1;\n                        }\n                    }\n                }\n                // Check if adjacent cells can be merged (vertical)\n                for(var col1 = 0; col1 < this.state[0].length; col1++)for(var row2 = 0; row2 < this.state.length - 1; row2++){\n                    if (this.state[row2][col1] === this.state[row2 + 1][col1]) return false;\n                }\n                return true; // No moves left\n            }\n        }\n    ]);\n    return Game;\n}();\nvar $3d28d7f1aac198f5$export$2e2bcd8739ae039 = $3d28d7f1aac198f5$var$Game;\n\n\n'use strict';\nvar $197cd56b15c33885$var$game = new (0, $3d28d7f1aac198f5$export$2e2bcd8739ae039)();\n// DOM elements\nvar $197cd56b15c33885$var$gameBoard = document.querySelector('.game-board');\nvar $197cd56b15c33885$var$restartButton = document.getElementById('restart');\nvar $197cd56b15c33885$var$scoreDisplay = document.getElementById('score');\nvar $197cd56b15c33885$var$gameOverMessage = document.querySelector('.game-over');\nvar $197cd56b15c33885$var$winMessage = document.getElementById('win');\n// Function to update the board display\nfunction $197cd56b15c33885$var$updateBoard() {\n    $197cd56b15c33885$var$gameBoard.innerHTML = '';\n    var board = $197cd56b15c33885$var$game.getState();\n    board.forEach(function(row) {\n        row.forEach(function(cell) {\n            var cellElement = document.createElement('div');\n            cellElement.classList.add('field-cell');\n            if (cell) {\n                cellElement.classList.add(\"field-cell--\".concat(cell));\n                cellElement.textContent = cell;\n            }\n            $197cd56b15c33885$var$gameBoard.appendChild(cellElement);\n        });\n    });\n    $197cd56b15c33885$var$scoreDisplay.textContent = $197cd56b15c33885$var$game.getScore();\n    if ($197cd56b15c33885$var$game.getStatus() === 'Won') $197cd56b15c33885$var$winMessage.classList.remove('hidden');\n    else if ($197cd56b15c33885$var$game.getStatus() === 'Game Over') $197cd56b15c33885$var$gameOverMessage.classList.remove('hidden');\n}\nfunction $197cd56b15c33885$var$updateTileClasses(tileElement, value) {\n    tileElement.className = 'tile';\n    if (value) tileElement.classList.add(\"tile-\".concat(value));\n}\n// eslint-disable-next-line no-unused-vars\nfunction $197cd56b15c33885$var$updateUI() {\n    // Update the game board and score\n    // eslint-disable-next-line no-undef\n    renderGameBoard($197cd56b15c33885$var$game.getState());\n    // eslint-disable-next-line no-undef\n    updateScore($197cd56b15c33885$var$game.getScore());\n    // Check for game over and display the loss message\n    if ($197cd56b15c33885$var$game.getStatus() === 'game_over') {\n        document.querySelector('.message-lose').classList.remove('hidden');\n        document.querySelector('.start').textContent = 'Restart';\n    }\n}\n// Function to handle the arrow key moves\n// eslint-disable-next-line no-shadow\ndocument.addEventListener('keydown', function(event) {\n    if ($197cd56b15c33885$var$game.getStatus() === 'Game Over' || $197cd56b15c33885$var$game.getStatus() === 'Won') return;\n    switch(event.key){\n        case 'ArrowLeft':\n            $197cd56b15c33885$var$game.moveLeft();\n            break;\n        case 'ArrowRight':\n            $197cd56b15c33885$var$game.moveRight();\n            break;\n        case 'ArrowUp':\n            $197cd56b15c33885$var$game.moveUp();\n            break;\n        case 'ArrowDown':\n            $197cd56b15c33885$var$game.moveDown();\n            break;\n    }\n    $197cd56b15c33885$var$updateBoard();\n});\n// Restart game\n$197cd56b15c33885$var$restartButton.addEventListener('click', function() {\n    var confirmRestart = window.confirm('Do you want to restart the game? Your current progress will be lost.');\n    if (confirmRestart) {\n        $197cd56b15c33885$var$game.restart();\n        $197cd56b15c33885$var$updateBoard();\n        $197cd56b15c33885$var$winMessage.classList.add('hidden');\n        $197cd56b15c33885$var$gameOverMessage.classList.add('hidden');\n        $197cd56b15c33885$var$restartButton.textContent = 'Start';\n    }\n});\n// Initial board setup\n$197cd56b15c33885$var$game.start();\n$197cd56b15c33885$var$updateBoard();\n$197cd56b15c33885$var$updateTileClasses();\n$197cd56b15c33885$var$updateUI();\n\n})();\n//# sourceMappingURL=index.d7c2f9f3.js.map\n","'use strict';\n\nimport Game from '../modules/Game.class.js';\n\nconst game = new Game();\n\n// DOM elements\nconst gameBoard = document.querySelector('.game-board');\nconst restartButton = document.getElementById('restart');\nconst scoreDisplay = document.getElementById('score');\nconst gameOverMessage = document.querySelector('.game-over');\nconst winMessage = document.getElementById('win');\n\n// Function to update the board display\nfunction updateBoard() {\n  gameBoard.innerHTML = '';\n\n  const board = game.getState();\n\n  board.forEach((row) => {\n    row.forEach((cell) => {\n      const cellElement = document.createElement('div');\n\n      cellElement.classList.add('field-cell');\n\n      if (cell) {\n        cellElement.classList.add(`field-cell--${cell}`);\n        cellElement.textContent = cell;\n      }\n      gameBoard.appendChild(cellElement);\n    });\n  });\n\n  scoreDisplay.textContent = game.getScore();\n\n  if (game.getStatus() === 'Won') {\n    winMessage.classList.remove('hidden');\n  } else if (game.getStatus() === 'Game Over') {\n    gameOverMessage.classList.remove('hidden');\n  }\n}\n\nfunction updateTileClasses(tileElement, value) {\n  tileElement.className = 'tile';\n\n  if (value) {\n    tileElement.classList.add(`tile-${value}`);\n  }\n}\n\n// eslint-disable-next-line no-unused-vars\nfunction updateUI() {\n  // Update the game board and score\n  // eslint-disable-next-line no-undef\n  renderGameBoard(game.getState());\n  // eslint-disable-next-line no-undef\n  updateScore(game.getScore());\n\n  // Check for game over and display the loss message\n  if (game.getStatus() === 'game_over') {\n    document.querySelector('.message-lose').classList.remove('hidden');\n    document.querySelector('.start').textContent = 'Restart';\n  }\n}\n\n// Function to handle the arrow key moves\n// eslint-disable-next-line no-shadow\ndocument.addEventListener('keydown', (event) => {\n  if (game.getStatus() === 'Game Over' || game.getStatus() === 'Won') {\n    return;\n  }\n\n  switch (event.key) {\n    case 'ArrowLeft':\n      game.moveLeft();\n      break;\n    case 'ArrowRight':\n      game.moveRight();\n      break;\n    case 'ArrowUp':\n      game.moveUp();\n      break;\n    case 'ArrowDown':\n      game.moveDown();\n      break;\n  }\n\n  updateBoard();\n});\n\n// Restart game\nrestartButton.addEventListener('click', () => {\n  const confirmRestart = window.confirm(\n    'Do you want to restart the game? Your current progress will be lost.',\n  );\n\n  if (confirmRestart) {\n    game.restart();\n    updateBoard();\n    winMessage.classList.add('hidden');\n    gameOverMessage.classList.add('hidden');\n    restartButton.textContent = 'Start';\n  } else {\n    // User decided not to restart; do nothing\n  }\n});\n\n// Initial board setup\ngame.start();\nupdateBoard();\nupdateTileClasses();\nupdateUI();\n","class Game {\n  constructor(initialState = null) {\n    // Initialize game state (empty board or provided state)\n    this.board = initialState || [\n      [null, null, null, null],\n      [null, null, null, null],\n      [null, null, null, null],\n      [null, null, null, null],\n    ];\n    this.score = 0;\n    this.gameOver = false;\n    this.won = false;\n    this.isMoved = false;\n\n    this.mergeFlags = [\n      [false, false, false, false],\n      [false, false, false, false],\n      [false, false, false, false],\n      [false, false, false, false],\n    ]; // Track merged cells to avoid merging twice\n  }\n\n  // Get the current state of the board\n  getState() {\n    // eslint-disable-next-line max-len\n    return JSON.parse(JSON.stringify(this.board)); // Return a deep copy of the board\n  }\n\n  // Get the current score\n  getScore() {\n    return this.score;\n  }\n\n  // Get the current game status (running, win, or game over)\n  getStatus() {\n    if (this.won) {\n      return 'Won';\n    }\n\n    if (this.gameOver) {\n      return 'Game Over';\n    }\n\n    return 'Running';\n  }\n\n  // Start the game (hide start message)\n  start() {\n    this.addTile();\n    this.addTile();\n  }\n\n  // Restart the game (reset state to initial state)\n  restart() {\n    this.board = [\n      [null, null, null, null],\n      [null, null, null, null],\n      [null, null, null, null],\n      [null, null, null, null],\n    ];\n    this.score = 0;\n    this.gameOver = false;\n    this.won = false;\n    this.isMoved = false;\n\n    this.mergeFlags = [\n      [false, false, false, false],\n      [false, false, false, false],\n      [false, false, false, false],\n      [false, false, false, false],\n    ];\n    this.start();\n  }\n\n  // Add a new tile (2 or 4) at a random empty position\n  addTile() {\n    const emptyCells = [];\n\n    // eslint-disable-next-line no-shadow\n    for (let row = 0; row < 4; row++) {\n      // eslint-disable-next-line no-shadow\n      for (let col = 0; col < 4; col++) {\n        if (this.board[row][col] === null) {\n          emptyCells.push([row, col]);\n        }\n      }\n    }\n\n    if (emptyCells.length === 0) {\n      return;\n    }\n\n    const [row, col] =\n      emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n    this.board[row][col] = Math.random() < 0.9 ? 2 : 4;\n  }\n\n  // Move tiles to the left\n  moveLeft() {\n    this.isMoved = false;\n\n    for (let row = 0; row < 4; row++) {\n      this.mergeFlags[row] = [false, false, false, false];\n\n      for (let col = 1; col < 4; col++) {\n        if (this.board[row][col] !== null) {\n          let currentCol = col;\n\n          while (currentCol > 0 && this.board[row][currentCol - 1] === null) {\n            this.board[row][currentCol - 1] = this.board[row][currentCol];\n            this.board[row][currentCol] = null;\n            currentCol--;\n            this.isMoved = true;\n          }\n\n          if (\n            currentCol > 0 &&\n            this.board[row][currentCol - 1] === this.board[row][currentCol] &&\n            !this.mergeFlags[row][currentCol - 1]\n          ) {\n            this.board[row][currentCol - 1] *= 2;\n            this.score += this.board[row][currentCol - 1];\n            this.board[row][currentCol] = null;\n            this.mergeFlags[row][currentCol - 1] = true;\n            this.isMoved = true;\n          }\n        }\n      }\n    }\n\n    if (this.isMoved) {\n      this.addTile();\n      this.checkGameOver();\n      this.checkWin();\n    }\n  }\n\n  // Move tiles to the right\n  moveRight() {\n    this.board = this.board.map((row) => row.reverse());\n    this.moveLeft();\n    this.board = this.board.map((row) => row.reverse());\n  }\n\n  // Move tiles up\n  moveUp() {\n    this.board = this.transposeBoard();\n    this.moveLeft();\n    this.board = this.transposeBoard();\n  }\n\n  // Move tiles down\n  moveDown() {\n    this.board = this.transposeBoard();\n    this.moveRight();\n    this.board = this.transposeBoard();\n  }\n\n  // Transpose the board (used for moving up/down)\n  transposeBoard() {\n    return this.board[0].map(\n      (_, colIndex) => this.board.map((row) => row[colIndex]),\n      // eslint-disable-next-line function-paren-newline\n    );\n  }\n\n  // Check if the player has won (2048 reached)\n  checkWin() {\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (this.board[row][col] === 2048) {\n          this.won = true;\n          break;\n        }\n      }\n    }\n  }\n\n  // Check if the game is over (no moves left)\n  checkGameOver() {\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (this.board[row][col] === null) {\n          return;\n        }\n\n        if (row < 3 && this.board[row][col] === this.board[row + 1][col]) {\n          return;\n        }\n\n        if (col < 3 && this.board[row][col] === this.board[row][col + 1]) {\n          return;\n        }\n      }\n    }\n    this.gameOver = true;\n  }\n\n  isGameOver() {\n    // Check if there are any empty cells\n    for (const row of this.state) {\n      if (row.includes(0)) {\n        return false;\n      }\n    }\n\n    // Check if adjacent cells can be merged (horizontal)\n    for (const row of this.state) {\n      for (let col = 0; col < row.length - 1; col++) {\n        if (row[col] === row[col + 1]) {\n          return false;\n        }\n      }\n    }\n\n    // Check if adjacent cells can be merged (vertical)\n    for (let col = 0; col < this.state[0].length; col++) {\n      for (let row = 0; row < this.state.length - 1; row++) {\n        if (this.state[row][col] === this.state[row + 1][col]) {\n          return false;\n        }\n      }\n    }\n\n    return true; // No moves left\n  }\n}\n\nexport default Game;\n","function _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _class_call_check as _ };\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n","import { _ as _array_with_holes } from \"./_array_with_holes.js\";\nimport { _ as _iterable_to_array_limit } from \"./_iterable_to_array_limit.js\";\nimport { _ as _non_iterable_rest } from \"./_non_iterable_rest.js\";\nimport { _ as _unsupported_iterable_to_array } from \"./_unsupported_iterable_to_array.js\";\n\nfunction _sliced_to_array(arr, i) {\n    return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();\n}\nexport { _sliced_to_array as _ };\n","function _array_with_holes(arr) {\n    if (Array.isArray(arr)) return arr;\n}\nexport { _array_with_holes as _ };\n","function _iterable_to_array_limit(arr, i) {\n    var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n    if (_i == null) return;\n\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _s, _e;\n\n    try {\n        for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n            _arr.push(_s.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally {\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally {\n            if (_d) throw _e;\n        }\n    }\n\n    return _arr;\n}\nexport { _iterable_to_array_limit as _ };\n","function _non_iterable_rest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nexport { _non_iterable_rest as _ };\n","import { _ as _array_like_to_array } from \"./_array_like_to_array.js\";\n\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nexport { _unsupported_iterable_to_array as _ };\n","function _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n    return arr2;\n}\nexport { _array_like_to_array as _ };\n"],"names":["$c3b10a83b523f372$export$71511d61b312f219","arr","len","length","i","arr2","Array","$197cd56b15c33885$var$game","protoProps","Game","initialState","arguments","instance","Constructor","TypeError","board","score","gameOver","won","isMoved","mergeFlags","key","value","JSON","parse","stringify","addTile","start","emptyCells","row","col","push","_emptyCells_Math_floor","isArray","Math","floor","random","_s","_e","_i","Symbol","iterator","_arr","_n","_d","call","next","done","err","o","minLen","n","Object","prototype","toString","slice","constructor","name","from","test","row1","col1","currentCol","checkGameOver","checkWin","map","reverse","moveLeft","transposeBoard","moveRight","_this","_","colIndex","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","state","includes","return","_iteratorNormalCompletion1","_didIteratorError1","_iteratorError1","_step1","_iterator1","row2","$4fc75ccb937ab1df$var$_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","$197cd56b15c33885$var$gameBoard","document","querySelector","$197cd56b15c33885$var$restartButton","getElementById","$197cd56b15c33885$var$scoreDisplay","$197cd56b15c33885$var$gameOverMessage","$197cd56b15c33885$var$winMessage","$197cd56b15c33885$var$updateBoard","innerHTML","getState","forEach","cell","cellElement","createElement","classList","add","concat","textContent","appendChild","getScore","getStatus","remove","addEventListener","event","moveUp","moveDown","window","confirm","restart","tileElement","className","renderGameBoard","updateScore"],"version":3,"file":"index.d7c2f9f3.js.map"}